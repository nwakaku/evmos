// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdvNFTCreated extends ethereum.Event {
  get params(): AdvNFTCreated__Params {
    return new AdvNFTCreated__Params(this);
  }
}

export class AdvNFTCreated__Params {
  _event: AdvNFTCreated;

  constructor(event: AdvNFTCreated) {
    this._event = event;
  }

  get metaDataHash(): string {
    return this._event.parameters[0].value.toString();
  }

  get assetHash(): string {
    return this._event.parameters[1].value.toString();
  }

  get tokenID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expirationDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get musicNFTId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AdvNFTHashUpdated extends ethereum.Event {
  get params(): AdvNFTHashUpdated__Params {
    return new AdvNFTHashUpdated__Params(this);
  }
}

export class AdvNFTHashUpdated__Params {
  _event: AdvNFTHashUpdated;

  constructor(event: AdvNFTHashUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get metaHash(): string {
    return this._event.parameters[1].value.toString();
  }

  get assetHash(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdvNFT extends ethereum.SmartContract {
  static bind(address: Address): AdvNFT {
    return new AdvNFT("AdvNFT", address);
  }

  _musicNFTCreateAdSpace(
    owner: Address,
    musicNFTId: BigInt,
    metadataHash: string,
    assetHash: string,
    expirationDuration: BigInt
  ): BigInt {
    let result = super.call(
      "_musicNFTCreateAdSpace",
      "_musicNFTCreateAdSpace(address,uint256,string,string,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(musicNFTId),
        ethereum.Value.fromString(metadataHash),
        ethereum.Value.fromString(assetHash),
        ethereum.Value.fromUnsignedBigInt(expirationDuration)
      ]
    );

    return result[0].toBigInt();
  }

  try__musicNFTCreateAdSpace(
    owner: Address,
    musicNFTId: BigInt,
    metadataHash: string,
    assetHash: string,
    expirationDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_musicNFTCreateAdSpace",
      "_musicNFTCreateAdSpace(address,uint256,string,string,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(musicNFTId),
        ethereum.Value.fromString(metadataHash),
        ethereum.Value.fromString(assetHash),
        ethereum.Value.fromUnsignedBigInt(expirationDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createAdSpace(
    musicNFTId: BigInt,
    metadataHash: string,
    assetHash: string,
    expirationDuration: BigInt
  ): BigInt {
    let result = super.call(
      "createAdSpace",
      "createAdSpace(uint256,string,string,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(musicNFTId),
        ethereum.Value.fromString(metadataHash),
        ethereum.Value.fromString(assetHash),
        ethereum.Value.fromUnsignedBigInt(expirationDuration)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAdSpace(
    musicNFTId: BigInt,
    metadataHash: string,
    assetHash: string,
    expirationDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAdSpace",
      "createAdSpace(uint256,string,string,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(musicNFTId),
        ethereum.Value.fromString(metadataHash),
        ethereum.Value.fromString(assetHash),
        ethereum.Value.fromUnsignedBigInt(expirationDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentAdvAssetUri(musicNFTId: BigInt): string {
    let result = super.call(
      "getCurrentAdvAssetUri",
      "getCurrentAdvAssetUri(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(musicNFTId)]
    );

    return result[0].toString();
  }

  try_getCurrentAdvAssetUri(musicNFTId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getCurrentAdvAssetUri",
      "getCurrentAdvAssetUri(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(musicNFTId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketplaceAddress(): Address {
    let result = super.call(
      "marketplaceAddress",
      "marketplaceAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marketplaceAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketplaceAddress",
      "marketplaceAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftContractAddr(): Address {
    let result = super.call(
      "nftContractAddr",
      "nftContractAddr():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nftContractAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftContractAddr",
      "nftContractAddr():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenMetadataURI(tokenId: BigInt): string {
    let result = super.call(
      "tokenMetadataURI",
      "tokenMetadataURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toString();
  }

  try_tokenMetadataURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenMetadataURI",
      "tokenMetadataURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _marketplaceAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _musicNFTCreateAdSpaceCall extends ethereum.Call {
  get inputs(): _musicNFTCreateAdSpaceCall__Inputs {
    return new _musicNFTCreateAdSpaceCall__Inputs(this);
  }

  get outputs(): _musicNFTCreateAdSpaceCall__Outputs {
    return new _musicNFTCreateAdSpaceCall__Outputs(this);
  }
}

export class _musicNFTCreateAdSpaceCall__Inputs {
  _call: _musicNFTCreateAdSpaceCall;

  constructor(call: _musicNFTCreateAdSpaceCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get musicNFTId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get metadataHash(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetHash(): string {
    return this._call.inputValues[3].value.toString();
  }

  get expirationDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class _musicNFTCreateAdSpaceCall__Outputs {
  _call: _musicNFTCreateAdSpaceCall;

  constructor(call: _musicNFTCreateAdSpaceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CreateAdSpaceCall extends ethereum.Call {
  get inputs(): CreateAdSpaceCall__Inputs {
    return new CreateAdSpaceCall__Inputs(this);
  }

  get outputs(): CreateAdSpaceCall__Outputs {
    return new CreateAdSpaceCall__Outputs(this);
  }
}

export class CreateAdSpaceCall__Inputs {
  _call: CreateAdSpaceCall;

  constructor(call: CreateAdSpaceCall) {
    this._call = call;
  }

  get musicNFTId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get metadataHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get assetHash(): string {
    return this._call.inputValues[2].value.toString();
  }

  get expirationDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateAdSpaceCall__Outputs {
  _call: CreateAdSpaceCall;

  constructor(call: CreateAdSpaceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetNftContractAddrCall extends ethereum.Call {
  get inputs(): SetNftContractAddrCall__Inputs {
    return new SetNftContractAddrCall__Inputs(this);
  }

  get outputs(): SetNftContractAddrCall__Outputs {
    return new SetNftContractAddrCall__Outputs(this);
  }
}

export class SetNftContractAddrCall__Inputs {
  _call: SetNftContractAddrCall;

  constructor(call: SetNftContractAddrCall) {
    this._call = call;
  }

  get _nftContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftContractAddrCall__Outputs {
  _call: SetNftContractAddrCall;

  constructor(call: SetNftContractAddrCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateHashCall extends ethereum.Call {
  get inputs(): UpdateHashCall__Inputs {
    return new UpdateHashCall__Inputs(this);
  }

  get outputs(): UpdateHashCall__Outputs {
    return new UpdateHashCall__Outputs(this);
  }
}

export class UpdateHashCall__Inputs {
  _call: UpdateHashCall;

  constructor(call: UpdateHashCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _metaDataHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _dataHash(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateHashCall__Outputs {
  _call: UpdateHashCall;

  constructor(call: UpdateHashCall) {
    this._call = call;
  }
}
